package com.wgc.green.controller;

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wgc.green.entity.SensorData;
import com.wgc.green.manager.RequestIotConfig;
import com.wgc.green.manager.SensorDataManager;
import com.wgc.green.repository.SensorDataRepository;

@RestController
@RequestMapping("/sensor_data")
public class SensorDataController {
	
	@Autowired
	private static SensorDataRepository sensorDataRepository;

	@CrossOrigin(origins = "*")
	@GetMapping("/building/{id}")
	public List<SensorData> getSensorDataByBuildingId(@PathVariable ("id") int buildId) {
		// dummy
		List<Long> sensorIDList = RequestIotConfig.getSensorIDListBy(buildId);
		List<SensorData> sensorDataList = new LinkedList<>();
		sensorDataList = new ArrayList<>();
		SensorData sd = new SensorData();
		sensorDataList.add(sd); 
		sensorDataList.add(sd); 
		return sensorDataList;
	}
	
	@CrossOrigin(origins = "*")
	@GetMapping("/floor/{id}")
	public List<SensorData> getSensorDataByFloorId(@PathVariable ("id") int floorId) {
		// dummy
		List<Long> sensorIDList = RequestIotConfig.getSensorIDListBy(floorId);
		List<SensorData> sensorDataList = new LinkedList<>();
		sensorDataList = new ArrayList<>();
		SensorData sd = new SensorData();
		sensorDataList.add(sd); 
		sensorDataList.add(sd); 
		return sensorDataList;
	}
	
	@CrossOrigin(origins = "*")
	@GetMapping("/room/{id}")
	public List<SensorData> getSensorDataByRoomId(@PathVariable ("id") int roomId, @RequestParam(value="startTime") Date startTime, @RequestParam(value="endTime") Date endTime) {
		List<SensorData> sensorDataList = new LinkedList<>();
		List<Long> sensorIdList = RequestIotConfig.getSensorIDListBy(roomId);
		for(Long sensorId : sensorIdList) {
			sensorDataList.addAll( SensorDataManager.getSensorDataBySensorIdAndTime(sensorId, startTime, endTime));
		}		
		return sensorDataList;
	}
	
	@CrossOrigin(origins = "*")
	@GetMapping("/sensor/{id}")
	public List<SensorData> getSensorDataBySensorId(@PathVariable ("id") long id, @RequestParam(value="startTime") Date startTime, @RequestParam(value="endTime") Date endTime) {
		return SensorDataManager.getSensorDataBySensorIdAndTime(id, startTime, endTime);
	}
	
	@CrossOrigin(origins = "*")
	@GetMapping("/test")
	public SensorData getSensorDataTest() {
		return new SensorData();
	}
	
	
	@CrossOrigin(origins = "*")
	@PostMapping  
	public void addSensorData(@RequestBody List<SensorData> sensorDataList) {
//		List<SensorData> sensorDataList1 = new LinkedList<>();
		SensorData sd = new SensorData();
		sd.setSensorId(111);
		sd.setData("data");
		sd.setType("idk");
		sd.setDate(new Date());
		sd.setType("type");
		sd.setUnit("unit");
		sd.setSeriesNum("sere");
		
		System.out.println(sensorDataList.get(0).getData());
		System.out.println(sensorDataList.get(0).getSensorId());
		System.out.println(sensorDataList.get(0).getUnit());
		//SensorDataManager.addSensorData(sensorDataList1);
		sensorDataRepository.insert(sd);
	} 

	@CrossOrigin(origins = "*")
	@PutMapping
	public void updateSensorData(@RequestBody SensorData sensorData) {
		SensorDataManager.updateSensorData(sensorData);
	}
	
	@CrossOrigin(origins = "*")
	@DeleteMapping("/{id}")
	public void deleteSensorData(@PathVariable ("id") String id ) {
		SensorDataManager.deleteSensorData(id);
	}
	
	
}
